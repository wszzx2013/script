local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/deividcomsono/Obsidian/refs/heads/main/Library.lua"))()

-- 创建窗口
local Window = Library:CreateWindow({
    Title = "高级自瞄系统",
    Footer = "v2.1",
    ToggleKeybind = Enum.KeyCode.RightControl,
    Center = true,
    AutoShow = true
})

-- 添加主标签页
local MainTab = Window:AddTab("自瞄控制", "crosshair")

-- 添加控制组
local ControlGroup = MainTab:AddLeftGroupbox("核心功能")

local aimbotEnabled = false
local aimbotKey = Enum.UserInputType.MouseButton2 -- 默认右键瞄准
local smoothness = 10 -- 瞄准平滑度
local fov = 100 -- 自瞄范围(FOV)
local targetPart = "Head" -- 瞄准部位
local teamCheck = true -- 队友检查
local visibilityCheck = true -- 视线检查

-- 获取最佳目标
local function getBestTarget()
    local camera = workspace.CurrentCamera
    local localPlayer = game:GetService("Players").LocalPlayer
    local localCharacter = localPlayer.Character
    if not localCharacter then return nil end
    
    local bestTarget = nil
    local closestAngle = math.rad(fov)
    local localHead = localCharacter:FindFirstChild("HumanoidRootPart")
    if not localHead then return nil end
    
    for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
        if player ~= localPlayer and player.Character then
            -- 团队检查
            if teamCheck and player.Team == localPlayer.Team then continue end
            
            local character = player.Character
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid and humanoid.Health > 0 then
                local target = character:FindFirstChild(targetPart) or character:FindFirstChild("HumanoidRootPart")
                if target then
                    -- 视线检查
                    if visibilityCheck then
                        local raycastParams = RaycastParams.new()
                        raycastParams.FilterDescendantsInstances = {localCharacter, character}
                        raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
                        local raycastResult = workspace:Raycast(localHead.Position, (target.Position - localHead.Position).Unit * 1000, raycastParams)
                        if raycastResult and raycastResult.Instance:FindFirstAncestorOfClass("Model") ~= character then continue end
                    end
                    
                    -- 计算屏幕位置
                    local screenPoint, onScreen = camera:WorldToViewportPoint(target.Position)
                    if onScreen then
                        local angle = math.atan2(
                            screenPoint.X - camera.ViewportSize.X/2,
                            screenPoint.Y - camera.ViewportSize.Y/2
                        )
                        
                        if math.abs(angle) < closestAngle then
                            closestAngle = math.abs(angle)
                            bestTarget = target
                        end
                    end
                end
            end
        end
    end
    
    return bestTarget
end

-- 平滑瞄准
local function smoothAim(target)
    local camera = workspace.CurrentCamera
    local mouse = game:GetService("UserInputService"):GetMouseLocation()
    local targetPos = target.Position
    
    local screenPoint = camera:WorldToViewportPoint(targetPos)
    local delta = Vector2.new(
        screenPoint.X - mouse.X,
        screenPoint.Y - mouse.Y
    )
    
    mousemoverel(
        delta.X / smoothness,
        delta.Y / smoothness
    )
end

-- 主瞄准循环
local function aimbotLoop()
    while aimbotEnabled do
        local target = getBestTarget()
        if target then
            smoothAim(target)
        end
        task.wait()
    end
end

-- 监听瞄准按键
game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessed)
    if input.UserInputType == aimbotKey and not gameProcessed then
        if aimbotEnabled then
            coroutine.wrap(aimbotLoop)()
        end
    end
end)

-- UI设置
ControlGroup:AddToggle("AimbotToggle", {
    Text = "启用自瞄",
    Default = false,
    Callback = function(Value)
        aimbotEnabled = Value
    end
})

local Keybind = Options.AimbotToggle:AddKeyPicker("AimbotKey", {
    Default = "MouseButton2",
    Mode = "Hold",
    Text = "自瞄按键",
    NoUI = false
})

Keybind:OnClick(function()
    aimbotKey = Keybind:GetValue()
end)

local SettingsGroup = MainTab:AddRightGroupbox("高级设置")

SettingsGroup:AddSlider("SmoothSlider", {
    Text = "平滑度",
    Default = 10,
    Min = 1,
    Max = 30,
    Rounding = 0,
    Callback = function(Value)
        smoothness = Value
    end
})

SettingsGroup:AddSlider("FOVSlider", {
    Text = "瞄准范围",
    Default = 100,
    Min = 10,
    Max = 360,
    Rounding = 0,
    Suffix = "°",
    Callback = function(Value)
        fov = Value
    end
})

local TargetDropdown = SettingsGroup:AddDropdown("TargetPart", {
    Text = "瞄准部位",
    Values = {"Head", "HumanoidRootPart", "Torso"},
    Default = 1,
    Callback = function(Value)
        targetPart = Value
    end
})

SettingsGroup:AddToggle("TeamCheck", {
    Text = "忽略队友",
    Default = true,
    Callback = function(Value)
        teamCheck = Value
    end
})

SettingsGroup:AddToggle("VisibilityCheck", {
    Text = "视线检查",
    Default = true,
    Callback = function(Value)
        visibilityCheck = Value
    end
})

-- 添加FOV可视化
local fovCircle = Drawing.new("Circle")
fovCircle.Visible = false
fovCircle.Color = Color3.fromRGB(255, 255, 255)
fovCircle.Thickness = 1
fovCircle.Transparency = 1
fovCircle.Filled = false

game:GetService("RunService").RenderStepped:Connect(function()
    if aimbotEnabled then
        local camera = workspace.CurrentCamera
        fovCircle.Visible = true
        fovCircle.Position = Vector2.new(camera.ViewportSize.X/2, camera.ViewportSize.Y/2)
        fovCircle.Radius = math.tan(math.rad(fov/2)) * camera.ViewportSize.Y
    else
        fovCircle.Visible = false
    end
end)

-- 初始化完成提示
Library:Notify("自瞄系统已加载", 3)
